Evaluatie regels:
Var (v): eval (a) == a
Functie (F): eval (fun x -> t) == fun x -> t
Functie applicatie (FA): eval (fun x -> t) a == t[x -> a]
Fucntie call (FC): eval (t u) = eval(t) -> t' && eval(u) -> u' = t' u' == v

Opdrachten long lambda

(FA)
1. (fun x -> y) z

(FA)
2. (fun x -> fun y -> x y) T 

(FA) 
3. (((fun x -> fun z -> fun y -> y + z - x) 5) A) B)

(FC)
4. (fun z -> fun a -> a z) (((fun b -> b) D) ((fun t -> t) I))

(FC)
5. (fun z -> fun y -> z + y) ((fun x -> x) 5)



Opdrachten shorthand lambda

(FA)
1.  (λ x -> x) (λy -> x)

(FA)
2.	(λ x y -> f y x) ((λ x -> x) A)

(FA)
3. (λ b a -> ((b) a)) (λc -> 2)

(FC)
4. (((λ b a -> ((b) a)) (λc -> c + c)) 3)

(FC)
5.	((λ x -> x) 4) ((λ x y -> x + y) 5)

(FC)
6.	((((λ a b c -> b a c) 4) (λ x y -> x + y)) 5)
